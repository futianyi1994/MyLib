apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.futianyi1994'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        versionCode 207
        versionName "2.0.7"
    }
    buildTypes {
        release {
            //aar包混淆需要使用以下两句
            //minifyEnabled true
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //是否混淆完全由app模块来决定：.pro文件会包含在aar文件中，这些pro配置会在混淆的时候被使用
            consumerProguardFile 'proguard-rules.pro'
            buildConfigField 'String', 'VERSION_DATE', "\"${releaseTime()}\""
        }
        debug {
            //aar包混淆需要使用以下两句
            //minifyEnabled true
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //是否混淆完全由app模块来决定：.pro文件会包含在aar文件中，这些pro配置会在混淆的时候被使用
            consumerProguardFile 'proguard-rules.pro'
            buildConfigField 'String', 'VERSION_DATE', "\"${releaseTime()}\""
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion rootProject.ext.android["androidSupportSdkVersion"]
                }
            }
        }
    }

    // 打包源码jar
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        //classifier = 'sources'
        getArchiveClassifier().set('sources')
    }
    //编译groovy代码时采用 UTF-8
    tasks.withType(GroovyCompile) {
        groovyOptions.encoding = "MacRoman"
    }
    //编译JAVA文件时采用UTF-8
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
    }
    //打包文档jar
    task javadocJar(type: Jar, dependsOn: javadoc) {
        //classifier = 'javadoc'
        getArchiveClassifier().set('javadoc')
        from javadoc.destinationDir
    }
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

//得到打包时间
def static releaseTime() {
    return new Date().format("yyyy-MM-dd")
}


dependencies {
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["runner"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
    //Rxjava
    api rootProject.ext.dependencies["rxjava2"]
    api rootProject.ext.dependencies["rxandroid2"]

    //Retrofit2
    api rootProject.ext.dependencies["retrofit2"]
    api rootProject.ext.dependencies["retrofit2-converter-gson"]
    //api rootProject.ext.dependencies["retrofit2-converter-scalars"]
    api rootProject.ext.dependencies["retrofit2-adapter-rxjava2"]
    //已经启用，改用官方Retrofit支持Rxjava的支持库
    //api rootProject.ext.dependencies["retrofit2-adapter-rxjava2-jakewharton"]

    //Autodispose
    //api rootProject.ext.dependencies["autodispose"]
    //api rootProject.ext.dependencies["autodispose-android"]
    //api rootProject.ext.dependencies["autodispose-lifecycle"]
    //Autodispose：包括以上三个包
    api rootProject.ext.dependencies["autodispose-android-archcomponents"]

    //Butterknife
    api rootProject.ext.dependencies["butterknife"]
    //需要在App的build.gradle中添加，这里添加无效
    //annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]

    //Lifecycles：Only (no ViewModel or LiveData)
    //api rootProject.ext.dependencies["lifecycle-runtime"]
    //Lifecycles：Just LiveData
    //api rootProject.ext.dependencies["lifecycle-livedata"]
    //Lifecycles：Just ViewModel
    //api rootProject.ext.dependencies["lifecycle-viewmodel"]
    //Lifecycles：ViewModel and LiveData
    api rootProject.ext.dependencies["lifecycle-extensions"]
    //Lifecycles：Java8 support Alternately lifecycle-compiler
    api rootProject.ext.dependencies["lifecycle-common-java8"]
    //需要在App的build.gradle中添加，这里添加无效(使用Java8时可以用lifecycle-common-java8代替)
    //annotationProcessor rootProject.ext.dependencies["lifecycle-compiler"]

    //Fragmentation
    //api rootProject.ext.dependencies["fragmentation"]
    //Activity作用域的EventBus，更安全，可有效避免after onSavenInstanceState()异常(需添加Evenbus)
    //api rootProject.ext.dependencies["fragmentation-eventbus"]
    //api rootProject.ext.dependencies["fragmentation-swipeback"]

    //Gson
    api rootProject.ext.dependencies["gson"]
    //Multidex
    api rootProject.ext.dependencies["multidex"]
    //Utilcode
    api rootProject.ext.dependencies["utilcode"]
    //Retrofit-url-manager
    api rootProject.ext.dependencies["retrofit-url-manager"]
    //PersistentCookieJar for OkHttp 3
    api rootProject.ext.dependencies["persistent-cookiejar"]

    /***********************************以下根据需求添加**************************************/

    compileOnly rootProject.ext.dependencies["design"]
    compileOnly rootProject.ext.dependencies["percent"]
    compileOnly rootProject.ext.dependencies["support-v4"]
    compileOnly rootProject.ext.dependencies["appcompat-v7"]
    compileOnly rootProject.ext.dependencies["recyclerview-v7"]
    compileOnly rootProject.ext.dependencies["constraint-layout"]

    //Dragger2
    //compileOnly rootProject.ext.dependencies["dagger"]
    //compileOnly rootProject.ext.dependencies["dagger-android"]
    //compileOnly rootProject.ext.dependencies["dagger-android-support"]
    //需要在App的build.gradle中添加，这里添加无效
    //annotationProcessor rootProject.ext.dependencies["dagger-compiler"]
    //需要在App的build.gradle中添加，这里添加无效
    //annotationProcessor rootProject.ext.dependencies["dagger-android-processor"]

    //Room
    compileOnly rootProject.ext.dependencies["room"]
    //Room for Support Rxjava2
    compileOnly rootProject.ext.dependencies["room-rxjava2"]
    //需要在App的build.gradle中添加，这里添加无效
    //annotationProcessor rootProject.ext.dependencies["room-compiler"]

    //Rxbinding
    compileOnly rootProject.ext.dependencies["rxbinding2"]
    //compileOnly rootProject.ext.dependencies["rxbinding-material"]

    //Glide
    compileOnly rootProject.ext.dependencies["glide"]
    compileOnly rootProject.ext.dependencies["glide-transformations"]
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]

    //SmartRefreshLayout
    compileOnly rootProject.ext.dependencies["smartrefreshlayout"]
    //没有使用特殊Header，可以不加这行
    //compileOnly rootProject.ext.dependencies["smartrefreshheader"]

    //Leakcanary
    releaseCompileOnly rootProject.ext.dependencies["leakcanary-android"]
    debugCompileOnly rootProject.ext.dependencies["leakcanary-android-no-op"]

    //Guava
    compileOnly rootProject.ext.dependencies["guava"]
    //Logger
    compileOnly rootProject.ext.dependencies["logger"]
    //Rxrelay2
    compileOnly rootProject.ext.dependencies["rxrelay2"]
    //Immersionbar
    compileOnly rootProject.ext.dependencies["immersionbar"]
    //RxPermissions
    compileOnly rootProject.ext.dependencies["rxpermissions"]
    //AndPermission
    compileOnly rootProject.ext.dependencies["andpermission"]
    //Bottom-navigation-bar
    compileOnly rootProject.ext.dependencies["bottom-navigation-bar"]
    //Okhttp-interceptor
    compileOnly rootProject.ext.dependencies["okhttp3-logging-interceptor"]
}

/**
 * ./gradlew :mylib:uploadArchives
 */
/*apply plugin: 'maven'
uploadArchives {
    repositories.mavenDeployer {
        //本地存放目录(自行选择)，可放在gradle.properties文件中引用
        def mavenDirPath = file('D:\\futia\\mavendir')
        //必须双引号，单引号不会转义$
        repository(url: "file://${mavenDirPath.absolutePath}")
        pom.project {
            //可以随意取，一般取包名
            groupId "com.bracks.futia"
            //可以随意取，一般取库的名字
            artifactId "mylib"
            //版本号
            version "1.0.0"
        }
    }
}*/